###########################################################################################
File: ./ai/create_inital_data.py

    from datetime import datetime
    
    # Importando os modelos
    from erp.models import Region, Store, ProductCategory, Product, Employee, Sale
    
    # Dados para popular o banco de dados
    regioes = [
        {"country": "Brasil", "state": "Minas Gerais", "city": "Belo Horizonte"},
        {"country": "Brasil", "state": "Minas Gerais", "city": "Uberlândia"},
        {"country": "Brasil", "state": "Minas Gerais", "city": "Contagem"},
        {"country": "Brasil", "state": "Minas Gerais", "city": "Juiz de Fora"},
        {"country": "Brasil", "state": "Minas Gerais", "city": "Betim"},
        {"country": "Brasil", "state": "Minas Gerais", "city": "Montes Claros"}
    ]
    
    lojas = [
        {"name": "Supermercado Central BH", "country": "Brasil", "state": "Minas Gerais", "city": "Belo Horizonte", "neighborhood": "Centro", "address": "Rua Principal, 123", "cep": "30100-000"},
        {"name": "Supermercado Uberlândia Sul", "country": "Brasil", "state": "Minas Gerais", "city": "Uberlândia", "neighborhood": "Sul", "address": "Avenida Brasil, 456", "cep": "38400-000"},
        {"name": "Supermercado Contagem Norte", "country": "Brasil", "state": "Minas Gerais", "city": "Contagem", "neighborhood": "Norte", "address": "Rua das Flores, 789", "cep": "32000-000"},
        {"name": "Supermercado Juiz de Fora Leste", "country": "Brasil", "state": "Minas Gerais", "city": "Juiz de Fora", "neighborhood": "Leste", "address": "Avenida Independência, 101", "cep": "36000-000"},
        {"name": "Supermercado Betim Oeste", "country": "Brasil", "state": "Minas Gerais", "city": "Betim", "neighborhood": "Oeste", "address": "Rua São João, 202", "cep": "32500-000"},
        {"name": "Supermercado Montes Claros Centro", "country": "Brasil", "state": "Minas Gerais", "city": "Montes Claros", "neighborhood": "Centro", "address": "Praça da Liberdade, 303", "cep": "39400-000"}
    ]
    
    categorias_produtos = [
        {"name": "Laticínios", "description": "Produtos derivados do leite"},
        {"name": "Bebidas", "description": "Refrigerantes, sucos e águas"},
        {"name": "Higiene Pessoal", "description": "Produtos de higiene e cuidados pessoais"},
        {"name": "Frios e Embutidos", "description": "Presunto, queijo, salame e outros"},
        {"name": "Limpeza", "description": "Produtos de limpeza doméstica"}
    ]
    
    produtos = [
        {"category": "Laticínios", "name": f"Leite Integral {i}", "sku": f"LT00{i}", "brand": f"Marca {chr(65 + i % 3)}", "price": 4.50 + i} for i in range(1, 11)
    ] + [
        {"category": "Bebidas", "name": f"Refrigerante {i}", "sku": f"RF00{i}", "brand": f"Marca {chr(65 + i % 3)}", "price": 5.00 + i} for i in range(1, 11)
    ] + [
        {"category": "Higiene Pessoal", "name": f"Shampoo {i}", "sku": f"SH00{i}", "brand": f"Marca {chr(65 + i % 3)}", "price": 10.90 + i} for i in range(1, 11)
    ] + [
        {"category": "Frios e Embutidos", "name": f"Queijo {i}", "sku": f"QJ00{i}", "brand": f"Marca {chr(65 + i % 3)}", "price": 15.00 + i} for i in range(1, 11)
    ] + [
        {"category": "Limpeza", "name": f"Detergente {i}", "sku": f"DT00{i}", "brand": f"Marca {chr(65 + i % 3)}", "price": 3.50 + i} for i in range(1, 11)
    ]
    
    funcionarios = [
        {"store": "Supermercado Central BH", "name": f"Funcionário {i}", "department": "Caixa", "role": "Operador", "birth_date": datetime(1980 + (i % 30), 1, (i % 28) + 1), "gender": "M" if i % 2 == 0 else "F", "education_level": "BS" if i % 2 == 0 else "GD", "salary": 2000.00 + i * 10, "hire_date": datetime(2021, (i % 12) + 1, (i % 28) + 1)} for i in range(1, 31)
    ]
    
    vendas = [
        {"store": "Supermercado Central BH", "product_name": f"Leite Integral {i % 10 + 1}", "product_category": "Laticínios", "quantity": (i % 10) + 1, "discounts": 1.50 if i % 3 == 0 else 0.00} for i in range(1, 21)
    ]
    
    # Criando objetos no banco de dados
    for regiao in regioes:
        Region.objects.create(
            country=regiao["country"],
            state=regiao["state"],
            city=regiao["city"]
        )
    
    for loja in lojas:
        region = Region.objects.get(country=loja["country"], state=loja["state"], city=loja["city"])
        Store.objects.create(
            name=loja["name"],
            region=region,
            neighborhood=loja["neighborhood"],
            address=loja["address"],
            cep=loja["cep"]
        )
    
    for categoria in categorias_produtos:
        ProductCategory.objects.create(
            name=categoria["name"],
            description=categoria["description"]
        )
    
    for produto in produtos:
        category = ProductCategory.objects.get(name=produto["category"])
        Product.objects.create(
            category=category,
            name=produto["name"],
            sku=produto["sku"],
            brand=produto["brand"],
            price=produto["price"]
        )
    
    for funcionario in funcionarios:
        store = Store.objects.get(name=funcionario["store"])
        Employee.objects.create(
            store=store,
            name=funcionario["name"],
            department=funcionario["department"],
            role=funcionario["role"],
            birth_date=funcionario["birth_date"],
            gender=funcionario["gender"],
            education_level=funcionario["education_level"],
            salary=funcionario["salary"],
            hire_date=funcionario["hire_date"]
        )
    
    for venda in vendas:
        store = Store.objects.get(name=venda["store"])
        product = Product.objects.get(name=venda["product_name"], category__name=venda["product_category"])
        Sale.objects.create(
            store=store,
            product=product,
            quantity=venda["quantity"],
            discounts=venda["discounts"]
        )
###########################################################################################

###########################################################################################
File: ./ai/manage.py

    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys
    
    
    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)
    
    
    if __name__ == '__main__':
        main()

###########################################################################################

###########################################################################################
File: ./ai/clean_database.py

    # Importando os modelos
    from erp.models import Region, Store, ProductCategory, Product, Employee, Sale
    
    # Função para deletar todos os registros do banco de dados
    def delete_all_records():
        try:
            Sale.objects.all().delete()
            Employee.objects.all().delete()
            Product.objects.all().delete()
            ProductCategory.objects.all().delete()
            Store.objects.all().delete()
            Region.objects.all().delete()
            print("Todos os registros foram removidos com sucesso.")
        except Exception as e:
            print(f"Ocorreu um erro ao remover os registros: {e}")
    
    # Executando a função
    delete_all_records()

###########################################################################################

###########################################################################################
File: ./ai/erp/tests.py

    from django.test import TestCase
    
    # Create your tests here.

###########################################################################################

###########################################################################################
File: ./ai/erp/admin.py

    from django.contrib import admin
    
    # Register your models here.

###########################################################################################

###########################################################################################
File: ./ai/erp/urls.py

    from django.urls import path
    
    from . import views
    
    urlpatterns = [
        path("", views.index, name="index"),
        path("products/", views.product_list, name="product_list"),
        path('product/create', views.product_create, name='product_create'),
        path('product/update/<int:product_id>/', views.product_update, name='product_update'),
        path('product/delete/<int:product_id>/', views.product_delete, name='product_delete'),
    
        path('prodcategs/', views.prodcateg_list, name='prodcateg_list'),
        path('prodcateg/create', views.prodcateg_create, name='prodcateg_create'),
        path('prodcateg/update/<int:category_id>/', views.prodcateg_update, name='prodcateg_update'),
        path('prodcateg/delete/<int:category_id>/', views.prodcateg_delete, name='prodcateg_delete'),
        
        # Definição da rota para listar as regiões
        path('regions/', views.region_list, name='region_list'),
        # Definição da rota para adicionar uma nova região
        path('regions/create', views.region_create, name='region_create'),
        # Definição da rota para editar uma região
        path('regions/update/<int:region_id>/', views.region_update, name='region_update'),
        # Definição da rota para deletar uma região
        path('regions/delete/<int:region_id>/', views.region_delete, name='region_delete'),
        
        # Definição da rota para listar as lojas
        path('stores/', views.store_list, name='store_list'),
        # Definição da rota para adicionar uma nova loja
        path('stores/create', views.store_create, name='store_create'),
        # Definição da rota para editar uma loja
        path('stores/update/<int:store_id>/', views.store_update, name='store_update'),
        # Definição da rota para deletar uma loja
        path('stores/delete/<int:store_id>/', views.store_delete, name='store_delete'),
        
        # Definição da rota para listar os funcionários
        path('employees/', views.employee_list, name='employee_list'),
        # Definição da rota para adicionar um novo funcionário
        path('employees/create', views.employee_create, name='employee_create'),
        # Definição da rota para editar um funcionário
        path('employees/update/<int:employee_id>/', views.employee_update, name='employee_update'),
        # Definição da rota para deletar um funcionário
        path('employees/delete/<int:employee_id>/', views.employee_delete, name='employee_delete'),
        
        # Definição da rota para listar as vendas
        path('sales/', views.sale_list, name='sale_list'),
        # Definição da rota para adicionar uma nova venda
        path('sales/create', views.sale_create, name='sale_create'),
        # Definição da rota para editar uma venda
        path('sales/update/<int:sale_id>/', views.sale_update, name='sale_update'),
        # Definição da rota para deletar uma venda
        path('sales/delete/<int:sale_id>/', views.sale_delete, name='sale_delete'),
    ]
###########################################################################################

###########################################################################################
File: ./ai/erp/models.py

    from django.db import models
    
    class Region(models.Model):
        country = models.CharField(max_length=250, default="Brasil")
        state = models.CharField(max_length=250)
        city = models.CharField(max_length=250)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
    
    class Store(models.Model):
        name = models.CharField(max_length=250)
        region = models.ForeignKey(to=Region, on_delete=models.DO_NOTHING)
        neighborhood = models.CharField(max_length=250)
        address = models.CharField(max_length=250)
        cep = models.CharField(max_length=20)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
    
    class ProductCategory(models.Model):
        name = models.CharField(max_length=250)
        description = models.TextField(null=True, blank=True)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
    
    class Product(models.Model):
        category = models.ForeignKey(to=ProductCategory, on_delete=models.DO_NOTHING)
        name = models.CharField(max_length=250)
        sku = models.CharField(max_length=100, unique=True)
        brand = models.CharField(max_length=250)
        price = models.DecimalField(max_digits=10, decimal_places=2)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
    
    class Sale(models.Model):
        store = models.ForeignKey(to=Store, on_delete=models.CASCADE)
        product = models.ForeignKey(to=Product, on_delete=models.CASCADE)
        quantity = models.PositiveIntegerField()
        discounts = models.DecimalField(max_digits=10, decimal_places=2, default=0.00)
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
    
    class Employee(models.Model):
        store = models.ForeignKey(to=Store, on_delete=models.CASCADE)
        name = models.CharField(max_length=250)
        department = models.CharField(max_length=250)
        role = models.CharField(max_length=250)
        birth_date = models.DateTimeField()
        gender = models.CharField(max_length=10, choices=[('M', 'Masculino'), ('F', 'Feminino')])
        education_level = models.CharField(max_length=100, choices=[
            ('BS', 'Ensino Médio'),
            ('GD', 'Graduação'),
            ('EP', 'Especialização'),
            ('MT', 'Mestrado'),
        ])
        salary = models.DecimalField(max_digits=10, decimal_places=2)
        hire_date = models.DateTimeField()
        created_at = models.DateTimeField(auto_now_add=True)
        updated_at = models.DateTimeField(auto_now=True)
###########################################################################################

###########################################################################################
File: ./ai/erp/__init__.py


###########################################################################################

###########################################################################################
File: ./ai/erp/apps.py

    from django.apps import AppConfig
    
    
    class ErpConfig(AppConfig):
        default_auto_field = 'django.db.models.BigAutoField'
        name = 'erp'

###########################################################################################

###########################################################################################
File: ./ai/erp/views.py

    from django.shortcuts import render, get_object_or_404, redirect
    from django.http import HttpResponse
    from django.utils.dateparse import parse_date
    from .models import Product, ProductCategory,  Region, Store, Employee, Sale
    
    def index(request):
        return render(request, "home.html")
    
    def product_list(request):
        products = Product.objects.all()
        return render(request, 'product/product_list.html', {"products": products})
    
    def product_create(request):
        if request.method == 'POST':
            name = request.POST['name']
            brand = request.POST['brand']
            price = request.POST['price']
            category_id = request.POST['category']
            sku = request.POST['sku']
    
            categoria = get_object_or_404(ProductCategory, pk=category_id)
    
            Product.objects.create(
                name=name,
                brand=brand,
                price=price,
                category=categoria,
                sku=sku
            )
            return redirect('product_list')
    
        categorias = ProductCategory.objects.all()
        return render(request, 'product/product_form.html', {'categorias': categorias})
    
    def product_update(request, product_id):
        produto = get_object_or_404(Product, pk=product_id)
        if request.method == 'POST':
            produto.name = request.POST['name']
            produto.brand = request.POST['brand']
            produto.price = request.POST['price']
            produto.category = get_object_or_404(ProductCategory, pk=request.POST['category'])
            produto.sku = request.POST['sku']
            produto.save()
            return redirect('product_list')
    
        categorias = ProductCategory.objects.all()
        return render(request, 'product/product_form.html', {'produto': produto, 'categorias': categorias})
    
    def product_delete(request, product_id):
        produto = get_object_or_404(Product, pk=product_id)
        produto.delete()
        return redirect('product_list')
    
    def prodcateg_list(request):
        categorias = ProductCategory.objects.all()
        return render(request, 'productCategory/productCategory_list.html', {"categorias": categorias})
    
    def prodcateg_create(request):
        if request.method == 'POST':
            name = request.POST['name']
            description = request.POST.get('description', '')
    
            ProductCategory.objects.create(
                name=name,
                description=description
            )
            return redirect('prodcateg_list')
    
        return render(request, 'productCategory/productCategory_form.html')
    
    def prodcateg_update(request, category_id):
        categoria = get_object_or_404(ProductCategory, pk=category_id)
        if request.method == 'POST':
            categoria.name = request.POST['name']
            categoria.description = request.POST.get('description', '')
            categoria.save()
            return redirect('prodcateg_list')
    
        return render(request, 'productCategory/productCategory_form.html', {'categoria': categoria})
    
    def prodcateg_delete(request, category_id):
        categoria = get_object_or_404(ProductCategory, pk=category_id)
        categoria.delete()
        return redirect('prodcateg_list')
    
    def region_list(request):
        regions = Region.objects.all()
        return render(request, 'region/region_list.html', {"regions": regions})
    
    def region_create(request):
        if request.method == 'POST':
            country = request.POST['country']
            state = request.POST['state']
            city = request.POST['city']
    
            Region.objects.create(
                country=country,
                state=state,
                city=city
            )
            return redirect('region_list')
        return render(request, 'region/region_form.html')
    
    def region_update(request, region_id):
        region = get_object_or_404(Region, pk=region_id)
        if request.method == 'POST':
            region.country = request.POST['country']
            region.state = request.POST['state']
            region.city = request.POST['city']
            region.save()
            return redirect('region_list')
        return render(request, 'region/region_form.html', {'region': region})
    
    def region_delete(request, region_id):
        region = get_object_or_404(Region, pk=region_id)
        region.delete()
        return redirect('region_list')
    
    def store_list(request):
        stores = Store.objects.all()
        return render(request, 'store/store_list.html', {"stores": stores})
    
    def store_create(request):
        if request.method == 'POST':
            name = request.POST['name']
            region_id = request.POST['region']
            neighborhood = request.POST['neighborhood']
            address = request.POST['address']
            cep = request.POST['cep']
    
            region = get_object_or_404(Region, pk=region_id)
    
            Store.objects.create(
                name=name,
                region=region,
                neighborhood=neighborhood,
                address=address,
                cep=cep
            )
            return redirect('store_list')
    
        regions = Region.objects.all()
        return render(request, 'store/store_form.html', {'regions': regions})
    
    def store_update(request, store_id):
        store = get_object_or_404(Store, pk=store_id)
        if request.method == 'POST':
            store.name = request.POST['name']
            store.region = get_object_or_404(Region, pk=request.POST['region'])
            store.neighborhood = request.POST['neighborhood']
            store.address = request.POST['address']
            store.cep = request.POST['cep']
            store.save()
            return redirect('store_list')
    
        regions = Region.objects.all()
        return render(request, 'store/store_form.html', {'store': store, 'regions': regions})
    
    def store_delete(request, store_id):
        store = get_object_or_404(Store, pk=store_id)
        store.delete()
        return redirect('store_list')
    
    
    def employee_list(request):
        employees = Employee.objects.all()
        return render(request, 'employee/employee_list.html', {"employees": employees})
    
    # View para criar um novo funcionário
    def employee_create(request):
        if request.method == 'POST':
            name = request.POST['name']
            store_id = request.POST['store']
            department = request.POST['department']
            role = request.POST['role']
            birth_date = parse_date(request.POST['birth_date'])  # Corrige para garantir que o valor seja uma data válida
            gender = request.POST['gender']
            education_level = request.POST['education_level']
            salary = request.POST['salary']
            hire_date = parse_date(request.POST['hire_date'])  # Corrige para garantir que o valor seja uma data válida
    
            store = get_object_or_404(Store, pk=store_id)
    
            # Cria o novo funcionário
            Employee.objects.create(
                name=name,
                store=store,
                department=department,
                role=role,
                birth_date=birth_date,
                gender=gender,
                education_level=education_level,
                salary=salary,
                hire_date=hire_date
            )
            return redirect('employee_list')
    
        stores = Store.objects.all()
        return render(request, 'employee/employee_form.html', {'stores': stores})
    
    # View para editar um funcionário
    def employee_update(request, employee_id):
        employee = get_object_or_404(Employee, pk=employee_id)
        if request.method == 'POST':
            employee.name = request.POST['name']
            employee.store = get_object_or_404(Store, pk=request.POST['store'])
            employee.department = request.POST['department']
            employee.role = request.POST['role']
            employee.birth_date = request.POST['birth_date']
            employee.salary = request.POST['salary']
            employee.save()
            return redirect('employee_list')
    
        stores = Store.objects.all()
        return render(request, 'employee/employee_form.html', {'employee': employee, 'stores': stores})
    
    # View para deletar um funcionário
    def employee_delete(request, employee_id):
        employee = get_object_or_404(Employee, pk=employee_id)
        employee.delete()
        return redirect('employee_list')
    
    # View para listar vendas
    def sale_list(request):
        sales = Sale.objects.all()
        return render(request, 'sale/sale_list.html', {"sales": sales})
    
    # View para criar uma nova venda
    def sale_create(request):
        if request.method == 'POST':
            store_id = request.POST['store']
            product_id = request.POST['product']
            quantity = request.POST['quantity']
            discounts = request.POST.get('discounts', 0.00)
    
            store = get_object_or_404(Store, pk=store_id)
            product = get_object_or_404(Product, pk=product_id)
    
            Sale.objects.create(
                store=store,
                product=product,
                quantity=quantity,
                discounts=discounts
            )
            return redirect('sale_list')
    
        stores = Store.objects.all()
        products = Product.objects.all()
        return render(request, 'sale/sale_form.html', {'stores': stores, 'products': products})
    
    # View para editar uma venda
    def sale_update(request, sale_id):
        sale = get_object_or_404(Sale, pk=sale_id)
        if request.method == 'POST':
            sale.store = get_object_or_404(Store, pk=request.POST['store'])
            sale.product = get_object_or_404(Product, pk=request.POST['product'])
            sale.quantity = request.POST['quantity']
            sale.discounts = request.POST.get('discounts', 0.00)
            sale.save()
            return redirect('sale_list')
    
        stores = Store.objects.all()
        products = Product.objects.all()
        return render(request, 'sale/sale_form.html', {'sale': sale, 'stores': stores, 'products': products})
    
    # View para deletar uma venda
    def sale_delete(request, sale_id):
        sale = get_object_or_404(Sale, pk=sale_id)
        sale.delete()
        return redirect('sale_list')
###########################################################################################

###########################################################################################
File: ./ai/erp/migrations/__init__.py


###########################################################################################

###########################################################################################
File: ./ai/erp/migrations/0001_initial.py

    # Generated by Django 5.1.3 on 2024-11-16 02:28
    
    import django.db.models.deletion
    from django.db import migrations, models
    
    
    class Migration(migrations.Migration):
    
        initial = True
    
        dependencies = [
        ]
    
        operations = [
            migrations.CreateModel(
                name='ProductCategory',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('name', models.CharField(max_length=250)),
                    ('description', models.TextField(blank=True, null=True)),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                ],
            ),
            migrations.CreateModel(
                name='Region',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('country', models.CharField(default='Brasil', max_length=250)),
                    ('state', models.CharField(max_length=250)),
                    ('city', models.CharField(max_length=250)),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                ],
            ),
            migrations.CreateModel(
                name='Product',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('name', models.CharField(max_length=250)),
                    ('sku', models.CharField(max_length=100, unique=True)),
                    ('brand', models.CharField(max_length=250)),
                    ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                    ('category', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='erp.productcategory')),
                ],
            ),
            migrations.CreateModel(
                name='Store',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('name', models.CharField(max_length=250)),
                    ('neighborhood', models.CharField(max_length=250)),
                    ('address', models.CharField(max_length=250)),
                    ('cep', models.CharField(max_length=20)),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                    ('region', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='erp.region')),
                ],
            ),
            migrations.CreateModel(
                name='Sale',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('quantity', models.PositiveIntegerField()),
                    ('discounts', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                    ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='erp.product')),
                    ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='erp.store')),
                ],
            ),
            migrations.CreateModel(
                name='Employee',
                fields=[
                    ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                    ('name', models.CharField(max_length=250)),
                    ('department', models.CharField(max_length=250)),
                    ('role', models.CharField(max_length=250)),
                    ('birth_date', models.DateTimeField()),
                    ('gender', models.CharField(choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=10)),
                    ('education_level', models.CharField(choices=[('BS', 'Ensino Médio'), ('GD', 'Graduação'), ('EP', 'Especialização'), ('MT', 'Mestrado')], max_length=100)),
                    ('salary', models.DecimalField(decimal_places=2, max_digits=10)),
                    ('hire_date', models.DateTimeField()),
                    ('created_at', models.DateTimeField(auto_now_add=True)),
                    ('updated_at', models.DateTimeField(auto_now=True)),
                    ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='erp.store')),
                ],
            ),
        ]

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/entity_base_list.html

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{% block title %}ERP System{% endblock %}</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                background-color: #f4f4f4;
                margin: 0;
                padding: 0;
            }
            .navbar {
                background-color: #333;
                overflow: hidden;
            }
            .navbar a {
                float: left;
                display: block;
                color: #f2f2f2;
                text-align: center;
                padding: 14px 20px;
                text-decoration: none;
            }
            .navbar a:hover {
                background-color: #ddd;
                color: black;
            }
            .content {
                padding: 20px;
            }
            .header {
                background-color: #90dea1;
                padding: 30px;
                color: white;
                font-size: 2em;
                text-align: center;
            }
            .list-header {
                font-size: 1.5em;
                color: #333;
                margin: 20px 0;
            }
            .card-container {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 20px;
                padding: 20px;
            }
            .card {
                background-color: white;
                padding: 20px;
                border-radius: 8px;
                box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
                text-decoration: none;
                color: black;
                transition: transform 0.2s;
            }
            .card:hover {
                transform: scale(1.05);
            }
        </style>
    </head>
    <body>
        <div class="navbar">
            <a href="/erp/">Home</a>
            <a href="/erp/stores">Lojas</a>
            <a href="/erp/products">Produtos</a>
            <a href="/erp/prodcategs">Categorias</a>
            <a href="/erp/employees">Funcionários</a>
            <a href="/erp/sales">Vendas</a>
            <a href="/erp/regions">Regiões</a>
        </div>
        <div class="content">
            <div class="header">
                Laper Supermercados
            </div>
            <div class="list-header">
                {% block list_header %}{% endblock %}
            </div>
            <div class="card-container">
                {% block content %}{% endblock %}
            </div>
        </div>
    </body>
    </html>

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/home.html

    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Início</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                text-align: center;
                background-color: #ffffff;
            }
            .header {
                background-color: #90dea1;
                padding: 50px;
                color: white;
                font-size: 2em;
            }
            .image-section {
                margin: 20px;
                background-color: #ff69b4;
                height: 200px;
                display: flex;
                align-items: center;
                justify-content: center;
                color: white;
                font-size: 2em;
                background-image: url("https://www.supermercadosbh.com.br/wp-content/uploads/2022/08/IMG_0841-scaled.jpg");
                background-color: #cccccc;
                height: 300px;
                background-position: center;
                background-repeat: no-repeat;
                background-size: cover;
                position: relative;
            }
            .button-grid {
                display: grid;
                grid-template-columns: repeat(3, 1fr);
                gap: 20px;
                padding: 20px;
                background-color: #f0f0f0; /* Fundo cinza claro */
            }
            .button {
                background-color: #ffffff; /* Fundo branco */
                border: 2px solid #d3d3d3; /* Borda cinza clara */
                padding: 20px;
                color: black;
                text-decoration: none;
                font-weight: bold;
                font-size: 1em;
                cursor: pointer;
                transition: background-color 0.3s, transform 0.3s;
            }
            .button:hover {
                background-color: #add8e6; /* Fundo azul claro ao passar o mouse */
                transform: scale(1.05); /* Efeito de aumentar ligeiramente ao passar o mouse */
            }
        </style>
    </head>
    <body>
        <div class="header">
            Laper Supermercados
        </div>
        <div class="image-section">
            
        </div>
        <div class="button-grid">
            <a href="/erp/stores" class="button">Lojas</a>
            <a href="/erp/products" class="button">Produtos</a>
            <a href="/erp/prodcategs" class="button">Categorias de Produtos</a>
            <a href="/erp/employees" class="button">Funcionários</a>
            <a href="/erp/sales" class="button">Vendas</a>
            <a href="/erp/regions" class="button">Regiões</a>
        </div>
    
    </body>
    </html>

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/region/region_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Região - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if region %}Editar Região{% else %}Adicionar Nova Região{% endif %}
        </div>
        <form method="post" action="{% if region %}{% url 'region_update' region.id %}{% else %}{% url 'region_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="country">País:</label>
                <input type="text" id="country" name="country" value="{% if region %}{{ region.country }}{% else %}Brasil{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="state">Estado:</label>
                <input type="text" id="state" name="state" value="{% if region %}{{ region.state }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="city">Cidade:</label>
                <input type="text" id="city" name="city" value="{% if region %}{{ region.city }}{% endif %}" required>
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >{% if region %}Editar{% else %}Criar{% endif %}</button>
                {% if region %}
                    <a href="{% url 'region_delete' region.id %}" class="button" style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Deletar</a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/region/region_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Regiões - ERP System{% endblock %}
    
    {% block list_header %}Lista de Regiões{% endblock %}
    
    {% block content %}
        <div style="margin-bottom: 20px; text-align: right;">
            <a href="/erp/regions/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Nova Região</a>
        </div>
        <div class="card-container">
            {% for region in regions %}
                <a href="/erp/regions/update/{{ region.id }}" class="card">
                    <strong>{{ region.city }}</strong><br>
                    Estado: {{ region.state }}<br>
                    País: {{ region.country }}
                </a>
            {% endfor %}
        </div>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/store/store_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Loja - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if store %}Editar Loja{% else %}Adicionar Nova Loja{% endif %}
        </div>
        <form method="post" action="{% if store %}{% url 'store_update' store.id %}{% else %}{% url 'store_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="name">Nome da Loja:</label>
                <input type="text" id="name" name="name" value="{% if store %}{{ store.name }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="region">Região:</label>
                <select id="region" name="region" required>
                    {% for region in regions %}
                        <option value="{{ region.id }}" {% if store and store.region.id == region.id %}selected{% endif %}>{{ region.state }} - {{ region.city }}</option>
                    {% endfor %}
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="neighborhood">Bairro:</label>
                <input type="text" id="neighborhood" name="neighborhood" value="{% if store %}{{ store.neighborhood }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="address">Endereço:</label>
                <input type="text" id="address" name="address" value="{% if store %}{{ store.address }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="cep">CEP:</label>
                <input type="text" id="cep" name="cep" value="{% if store %}{{ store.cep }}{% endif %}" required>
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >{% if store %}Editar{% else %}Criar{% endif %}</button>
                {% if store %}
                    <a href="{% url 'store_delete' store.id %}" class="button" style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Deletar</a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/store/store_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Lojas - ERP System{% endblock %}
    
    {% block list_header %}Lista de Lojas{% endblock %}
    
    {% block content %}
        <div style="margin-bottom: 20px; text-align: right;">
            <a href="/erp/stores/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Nova Loja</a>
        </div>
        <div class="card-container">
            {% for store in stores %}
                <a href="/erp/stores/update/{{ store.id }}" class="card">
                    <strong>{{ store.name }}</strong><br>
                    Região: {{ store.region.state }} - {{ store.region.city }}<br>
                    Bairro: {{ store.neighborhood }}
                </a>
            {% endfor %}
        </div>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/productCategory/productCategory_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Categoria - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if categoria %}Editar Categoria{% else %}Adicionar Nova Categoria{% endif %}
        </div>
        <form method="post" action="{% if categoria %}{% url 'prodcateg_update' categoria.id %}{% else %}{% url 'prodcateg_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="name">Nome da Categoria:</label>
                <input type="text" id="name" name="name" value="{% if categoria %}{{ categoria.name }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="description">Descrição:</label>
                <textarea id="description" name="description" rows="4">{% if categoria %}{{ categoria.description }}{% endif %}</textarea>
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >{% if categoria %}Editar{% else %}Criar{% endif %}</button>
                {% if categoria %}
                    <a href="{% url 'prodcateg_delete' categoria.id %}" class="button" style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Deletar</a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/productCategory/productCategory_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Categorias de Produtos - ERP System{% endblock %}
    
    {% block list_header %}Lista de Categorias de Produtos{% endblock %}
    
    {% block content %}
        <div style="margin-bottom: 20px; text-align: right;">
            <a href="/erp/prodcateg/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Nova Categoria</a>
        </div>
        <div class="card-container">
            {% for categoria in categorias %}
                <a href="/erp/prodcateg/update/{{ categoria.id }}" class="card">
                    <strong>{{ categoria.name }}</strong><br>
                    Descrição: {{ categoria.description }}
                </a>
            {% endfor %}
        </div>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/product/product_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Produtos - ERP System{% endblock %}
    
    {% block list_header %}Lista de Produtos
        <div style="margin-top: 20px; text-align: right;">
            <a href="/erp/product/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Novo Produto</a>
        </div>{% endblock %}
    
    {% block content %}
        {% for produto in products %}
            <a href="/erp/product/update/{{ produto.id }}" class="card">
                <strong>{{ produto.name }}</strong> - Marca: {{ produto.brand }} - Preço: ${{ produto.price }}
            </a>
        {% endfor %}
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/product/product_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Produto - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if produto %}Editar Produto{% else %}Adicionar Novo Produto{% endif %}
        </div>
        <form method="post" action="{% if produto %}{% url 'product_update' produto.id %}{% else %}{% url 'product_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="name">Nome do Produto:</label>
                <input type="text" id="name" name="name" value="{% if produto %}{{ produto.name }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="brand">Marca:</label>
                <input type="text" id="brand" name="brand" value="{% if produto %}{{ produto.brand }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="price">Preço:</label>
                <input type="number" id="price" name="price" value="{% if produto %}{{ produto.price }}{% endif %}" step="0.01" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="category">Categoria:</label>
                <select id="category" name="category" required>
                    {% for categoria in categorias %}
                        <option value="{{ categoria.id }}" {% if produto and produto.category.id == categoria.id %}selected{% endif %}>{{ categoria.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="sku">SKU:</label>
                <input type="text" id="sku" name="sku" value="{% if produto %}{{ produto.sku }}{% endif %}" required>
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >
                    {% if produto %}Editar{% else %}Criar{% endif %}
                </button>
                {% if produto %}
                    <a
                        href="{% url 'product_delete' produto.id %}"
                        class="button"
                        style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;"
                    >
                        Deletar
                    </a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/sale/sale_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Venda - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if sale %}Editar Venda{% else %}Adicionar Nova Venda{% endif %}
        </div>
        <form method="post" action="{% if sale %}{% url 'sale_update' sale.id %}{% else %}{% url 'sale_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="store">Loja:</label>
                <select id="store" name="store" required>
                    {% for store in stores %}
                        <option value="{{ store.id }}" {% if sale and sale.store.id == store.id %}selected{% endif %}>{{ store.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="product">Produto:</label>
                <select id="product" name="product" required>
                    {% for product in products %}
                        <option value="{{ product.id }}" {% if sale and sale.product.id == product.id %}selected{% endif %}>{{ product.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="quantity">Quantidade:</label>
                <input type="number" id="quantity" name="quantity" value="{% if sale %}{{ sale.quantity }}{% endif %}" min="1" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="discounts">Descontos:</label>
                <input type="number" id="discounts" name="discounts" value="{% if sale %}{{ sale.discounts }}{% else %}0.00{% endif %}" step="0.01">
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >{% if sale %}Editar{% else %}Criar{% endif %}</button>
                {% if sale %}
                    <a href="{% url 'sale_delete' sale.id %}" class="button" style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Deletar</a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/sale/sale_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Vendas - ERP System{% endblock %}
    
    {% block list_header %}Lista de Vendas{% endblock %}
    
    {% block content %}
        <div style="margin-bottom: 20px; text-align: right;">
            <a href="/erp/sales/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Nova Venda</a>
        </div>
        <div class="card-container">
            {% for sale in sales %}
                <a href="/erp/sales/update/{{ sale.id }}" class="card">
                    <strong>Produto: {{ sale.product.name }}</strong><br>
                    Loja: {{ sale.store.name }}<br>
                    Quantidade: {{ sale.quantity }}<br>
                    Desconto: R$ {{ sale.discounts }}
                </a>
            {% endfor %}
        </div>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/employee/employee_form.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Funcionário - ERP System{% endblock %}
    
    {% block content %}
        <div class="header">
            {% if employee %}Editar Funcionário{% else %}Adicionar Novo Funcionário{% endif %}
        </div>
        <form method="post" action="{% if employee %}{% url 'employee_update' employee.id %}{% else %}{% url 'employee_create' %}{% endif %}">
            {% csrf_token %}
            <div style="margin-bottom: 15px;">
                <label for="name">Nome do Funcionário:</label>
                <input type="text" id="name" name="name" value="{% if employee %}{{ employee.name }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="store">Loja:</label>
                <select id="store" name="store" required>
                    {% for store in stores %}
                        <option value="{{ store.id }}" {% if employee and employee.store.id == store.id %}selected{% endif %}>{{ store.name }}</option>
                    {% endfor %}
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="department">Departamento:</label>
                <input type="text" id="department" name="department" value="{% if employee %}{{ employee.department }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="role">Cargo:</label>
                <input type="text" id="role" name="role" value="{% if employee %}{{ employee.role }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="birth_date">Data de Nascimento:</label>
                <input type="date" id="birth_date" name="birth_date" value="{% if employee %}{{ employee.birth_date|date:'Y-m-d' }}{% endif %}" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="gender">Gênero:</label>
                <select id="gender" name="gender" required>
                    <option value="M" {% if employee and employee.gender == 'M' %}selected{% endif %}>Masculino</option>
                    <option value="F" {% if employee and employee.gender == 'F' %}selected{% endif %}>Feminino</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="education_level">Nível de Escolaridade:</label>
                <select id="education_level" name="education_level" required>
                    <option value="BS" {% if employee and employee.education_level == 'BS' %}selected{% endif %}>Ensino Médio</option>
                    <option value="GD" {% if employee and employee.education_level == 'GD' %}selected{% endif %}>Graduação</option>
                    <option value="EP" {% if employee and employee.education_level == 'EP' %}selected{% endif %}>Especialização</option>
                    <option value="MT" {% if employee and employee.education_level == 'MT' %}selected{% endif %}>Mestrado</option>
                </select>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="salary">Salário:</label>
                <input type="number" id="salary" name="salary" value="{% if employee %}{{ employee.salary }}{% endif %}" step="0.01" required>
            </div>
            <div style="margin-bottom: 15px;">
                <label for="hire_date">Data de Admissão:</label>
                <input type="date" id="hire_date" name="hire_date" value="{% if employee %}{{ employee.hire_date|date:'Y-m-d' }}{% endif %}" required>
            </div>
            <div style="margin-top: 30px;">
                <button
                    type="submit"
                    class="button"
                    style="background-color: #72b574; color: white; font-size: 16px; padding: 10px 20px; text-decoration: none; border-radius: 5px; border: none; cursor: pointer"
                >{% if employee %}Editar{% else %}Criar{% endif %}</button>
                {% if employee %}
                    <a href="{% url 'employee_delete' employee.id %}" class="button" style="background-color: #ff4c4c; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Deletar</a>
                {% endif %}
            </div>
        </form>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/erp/templates/employee/employee_list.html

    {% extends '../entity_base_list.html' %}
    
    {% block title %}Funcionários - ERP System{% endblock %}
    
    {% block list_header %}Lista de Funcionários{% endblock %}
    
    {% block content %}
        <div style="margin-bottom: 20px; text-align: right;">
            <a href="/erp/employees/create" class="button" style="background-color: #4CAF50; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px;">Adicionar Novo Funcionário</a>
        </div>
        <div class="card-container">
            {% for employee in employees %}
                <a href="/erp/employees/update/{{ employee.id }}" class="card">
                    <strong>{{ employee.name }}</strong><br>
                    Loja: {{ employee.store.name }}<br>
                    Cargo: {{ employee.role }}
                </a>
            {% endfor %}
        </div>
    {% endblock %}

###########################################################################################

###########################################################################################
File: ./ai/app/settings.py

    """
    Django settings for app project.
    
    Generated by 'django-admin startproject' using Django 5.1.3.
    
    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/topics/settings/
    
    For the full list of settings and their values, see
    https://docs.djangoproject.com/en/5.1/ref/settings/
    """
    
    from pathlib import Path
    
    # Build paths inside the project like this: BASE_DIR / 'subdir'.
    BASE_DIR = Path(__file__).resolve().parent.parent
    
    
    # Quick-start development settings - unsuitable for production
    # See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/
    
    # SECURITY WARNING: keep the secret key used in production secret!
    SECRET_KEY = 'django-insecure-_hu_k$2ew3joqeu5g(_gmt^i0v&lo4nqc+q+lbz!&a1v$ixgts'
    
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
    
    ALLOWED_HOSTS = []
    
    
    # Application definition
    
    INSTALLED_APPS = [
        'erp.apps.ErpConfig',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.staticfiles',
    ]
    
    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',
    ]
    
    ROOT_URLCONF = 'app.urls'
    
    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                ],
            },
        },
    ]
    
    WSGI_APPLICATION = 'app.wsgi.application'
    
    
    # Database
    # https://docs.djangoproject.com/en/5.1/ref/settings/#databases
    
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
    
    
    # Password validation
    # https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators
    
    AUTH_PASSWORD_VALIDATORS = [
        {
            'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
        },
        {
            'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
        },
    ]
    
    
    # Internationalization
    # https://docs.djangoproject.com/en/5.1/topics/i18n/
    
    LANGUAGE_CODE = 'en-us'
    
    TIME_ZONE = 'UTC'
    
    USE_I18N = True
    
    USE_TZ = True
    
    
    # Static files (CSS, JavaScript, Images)
    # https://docs.djangoproject.com/en/5.1/howto/static-files/
    
    STATIC_URL = 'static/'
    
    # Default primary key field type
    # https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
    
    DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

###########################################################################################

###########################################################################################
File: ./ai/app/wsgi.py

    """
    WSGI config for app project.
    
    It exposes the WSGI callable as a module-level variable named ``application``.
    
    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/howto/deployment/wsgi/
    """
    
    import os
    
    from django.core.wsgi import get_wsgi_application
    
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
    
    application = get_wsgi_application()

###########################################################################################

###########################################################################################
File: ./ai/app/urls.py

    """
    URL configuration for app project.
    
    The `urlpatterns` list routes URLs to views. For more information please see:
        https://docs.djangoproject.com/en/5.1/topics/http/urls/
    Examples:
    Function views
        1. Add an import:  from my_app import views
        2. Add a URL to urlpatterns:  path('', views.home, name='home')
    Class-based views
        1. Add an import:  from other_app.views import Home
        2. Add a URL to urlpatterns:  path('', Home.as_view(), name='home')
    Including another URLconf
        1. Import the include() function: from django.urls import include, path
        2. Add a URL to urlpatterns:  path('blog/', include('blog.urls'))
    """
    from django.contrib import admin
    from django.urls import path, include
    
    urlpatterns = [
        path("erp/", include("erp.urls")),
        path('admin/', admin.site.urls),
    ]

###########################################################################################

###########################################################################################
File: ./ai/app/__init__.py


###########################################################################################

###########################################################################################
File: ./ai/app/asgi.py

    """
    ASGI config for app project.
    
    It exposes the ASGI callable as a module-level variable named ``application``.
    
    For more information on this file, see
    https://docs.djangoproject.com/en/5.1/howto/deployment/asgi/
    """
    
    import os
    
    from django.core.asgi import get_asgi_application
    
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')
    
    application = get_asgi_application()

###########################################################################################

